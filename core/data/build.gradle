plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdkVersion project.compileSdkVersion.toInteger()

    defaultConfig {
        minSdkVersion project.minSdkVersion.toInteger()
        targetSdkVersion project.targetSdkVersion.toInteger()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField("String", "NESHAN_API_KEY", getNeshanApiKey())
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
}

dependencies {
    testImplementation "junit:junit:$junitVersion"
    testImplementation("com.squareup.okhttp3:mockwebserver:$okhttpVersion")
    testImplementation "androidx.arch.core:core-testing:$archTestingVersion"
//    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"

    androidTestImplementation "androidx.test.ext:junit:$testJunit"
    androidTestImplementation "androidx.test.espresso:espresso-core:$testEspresso"

    // Hilt dependencies
    api "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-android-compiler:$hiltVersion"
    kapt "androidx.hilt:hilt-compiler:$hiltCompilerVersion"

    // Network
    api "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"
    api "com.squareup.retrofit2:converter-gson:$retrofitVersion"

    // RxJava
    api "io.reactivex.rxjava3:rxandroid:$rxAndroidVersion"
    implementation "io.reactivex.rxjava3:rxjava:$rxJavaVersion"
    // RxJava3 Adapter for retrofit
    implementation "com.github.akarnokd:rxjava3-retrofit-adapter:$retrofitAdapterVersion"
}

String getNeshanApiKey() {
    def propFile = rootProject.file("./local.properties")
    def properties = new Properties()
    properties.load(new FileInputStream(propFile))
    return properties['NESHAN_API_KEY']
}